{"version":3,"file":"static/js/519.b8697d46.chunk.js","mappings":"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","sources":["components/shared/ImageUploader.jsx","components/shared/UploadImageForm.jsx","pages/UploadImage.jsx","../node_modules/@tanstack/react-query/src/useQuery.ts"],"sourcesContent":["const ImageUploader = ({onFileSelect}) => {\r\n\r\n  const handleFileInput = (e) => {\r\n    onFileSelect(e.target.files[0])\r\n  }\r\n  \r\n  return (\r\n    <div>\r\n        <input\r\n          className='border border-gray-200 w-full rounded-md mb-3' \r\n          type=\"file\" \r\n          onChange={handleFileInput} />\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default ImageUploader","import React from 'react'\r\nimport { useState } from 'react';\r\nimport ImageUploader from './ImageUploader';\r\n\r\nconst UploadImageForm = ({ categoryData, submitFn, isUploadLoading, isUploadError, uploadError, method, imageData}) => {\r\n\r\n    const [title, setTitle] = useState(imageData ? imageData.image.title : \"\");\r\n    const [description, setDescription] = useState(imageData ? imageData.image.desc : \"\");\r\n    const [category, setCategory] = useState(imageData ? imageData.image.category._id : \"\");\r\n    const [selectedFile, setSelectedFile] = useState(null);\r\n\r\n    const [inputError, setInputError] = useState(false);\r\n\r\n    const submitForm = e => {\r\n      e.preventDefault()\r\n      if (title === \"\" || category === \"\" || description === \"\" ) {\r\n        if(method === \"create\") {\r\n          if(selectedFile === null) {\r\n            setInputError(true);\r\n            return\r\n          }\r\n        }\r\n        setInputError(true);\r\n        return\r\n      }\r\n      const formData = new FormData();\r\n      formData.append(\"title\", title);\r\n      formData.append(\"desc\", description);\r\n      formData.append(\"category\", category);\r\n      if(method === \"create\") {\r\n        formData.append(\"image\", selectedFile);\r\n      }\r\n      \r\n      submitFn(formData)\r\n    };\r\n\r\n  return (\r\n    <div className='m-5 p-5 w-96 shadow-md shadow-gray-200' style={{fontFamily: \"Quicksand\"}}>\r\n      <h2 className=\"text-xl font-bold text-center\">{method === \"create\" ? \"Upload\" : \"Edit\"} your image</h2>\r\n      {isUploadLoading && (<p className='bg-green-200 mb-3 rounded text-center px-5'><span className='animate-pulsetacking-wider font-bold text-green-600 mb-3'>Photo Uploading ....</span></p>)}\r\n      {isUploadError && (<p className='text-red-400 text-sm bg-red-100 px-3 py-1 rounded mb-3'>{uploadError?.info.message}</p>)}\r\n      {inputError && (<p className='text-red-400 text-sm bg-red-100 px-3 py-1 rounded mb-3'>Fill up all fields</p>)}\r\n      <form onSubmit={submitForm}>\r\n        <div className='flex flex-col'>\r\n          <label htmlFor=\"image-title\">Title</label>\r\n          <input\r\n            className='border border-gray-300 rounded-md px-3 py-1 w-full mb-3' \r\n            type=\"text\" \r\n            id=\"image-title\"\r\n            value={title}\r\n            onChange={(e) => setTitle(e.target.value)}\r\n          />\r\n        </div>\r\n        <div className=\"flex flex-col\">\r\n            <label htmlFor=\"image-category\">Select Category</label>\r\n            <select\r\n              value={category}\r\n              onChange={(e)=>setCategory(e.target.value)} \r\n              className='border border-gray-300 rounded-md px-3 py-2 w-full mb-3 bg-white' \r\n              name=\"category\" \r\n              id=\"image-category\"\r\n            >\r\n                <option value=\"\">Select Category</option>\r\n                {categoryData.map(category => (\r\n                  <option key={category._id} value={category._id}>{category.name}</option>\r\n                ))}\r\n            </select>\r\n        </div>\r\n        <div className='flex flex-col'>\r\n          <label htmlFor=\"image-desc\">Description</label>\r\n          <textarea\r\n            className='border border-gray-300 rounded-md px-3 py-1 w-full mb-3'  \r\n            type=\"text\" \r\n            id=\"image-desc\"\r\n            value={description}\r\n            onChange={(e) => setDescription(e.target.value)}  \r\n          ></textarea>\r\n        </div>\r\n        {method === \"create\" && (\r\n          <ImageUploader onFileSelect={(file)=> setSelectedFile(file)} />\r\n        )}\r\n        <button type='submit' className='bg-orange-500 text-white rounded-md px-3 py-1'>{method === \"create\" ? \"Add Photo\" : \"Edit Photo\"}</button>\r\n      </form>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default UploadImageForm","import { useQuery } from '@tanstack/react-query';\r\nimport UploadImageForm from '../components/shared/UploadImageForm';\r\nimport { fetchCategories } from '../utils/http';\r\n\r\nconst UploadImagePage = () => {\r\n\r\n  const {data: categoryData, isError: isCategoryError, error: categoryError} = useQuery({\r\n    queryKey: ['categories'],\r\n    queryFn: () => fetchCategories()\r\n  })\r\n \r\n  return (\r\n    <>\r\n      <UploadImageForm categoryData={categoryData} method=\"create\" />\r\n    </>\r\n  )\r\n}\r\n\r\nexport default UploadImagePage","'use client'\nimport { QueryObserver, parseQueryArgs } from '@tanstack/query-core'\nimport { useBaseQuery } from './useBaseQuery'\nimport type { QueryFunction, QueryKey } from '@tanstack/query-core'\nimport type {\n  DefinedUseQueryResult,\n  UseQueryOptions,\n  UseQueryResult,\n} from './types'\n\n// HOOK\n\nexport function useQuery<\n  TQueryFnData = unknown,\n  TError = unknown,\n  TData = TQueryFnData,\n  TQueryKey extends QueryKey = QueryKey,\n>(\n  options: Omit<\n    UseQueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n    'initialData'\n  > & { initialData?: () => undefined },\n): UseQueryResult<TData, TError>\n\nexport function useQuery<\n  TQueryFnData = unknown,\n  TError = unknown,\n  TData = TQueryFnData,\n  TQueryKey extends QueryKey = QueryKey,\n>(\n  options: Omit<\n    UseQueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n    'initialData'\n  > & { initialData: TQueryFnData | (() => TQueryFnData) },\n): DefinedUseQueryResult<TData, TError>\n\nexport function useQuery<\n  TQueryFnData = unknown,\n  TError = unknown,\n  TData = TQueryFnData,\n  TQueryKey extends QueryKey = QueryKey,\n>(\n  options: UseQueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n): UseQueryResult<TData, TError>\n\nexport function useQuery<\n  TQueryFnData = unknown,\n  TError = unknown,\n  TData = TQueryFnData,\n  TQueryKey extends QueryKey = QueryKey,\n>(\n  queryKey: TQueryKey,\n  options?: Omit<\n    UseQueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n    'queryKey' | 'initialData'\n  > & { initialData?: () => undefined },\n): UseQueryResult<TData, TError>\n\nexport function useQuery<\n  TQueryFnData = unknown,\n  TError = unknown,\n  TData = TQueryFnData,\n  TQueryKey extends QueryKey = QueryKey,\n>(\n  queryKey: TQueryKey,\n  options?: Omit<\n    UseQueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n    'queryKey' | 'initialData'\n  > & { initialData: TQueryFnData | (() => TQueryFnData) },\n): DefinedUseQueryResult<TData, TError>\n\nexport function useQuery<\n  TQueryFnData = unknown,\n  TError = unknown,\n  TData = TQueryFnData,\n  TQueryKey extends QueryKey = QueryKey,\n>(\n  queryKey: TQueryKey,\n  options?: Omit<\n    UseQueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n    'queryKey'\n  >,\n): UseQueryResult<TData, TError>\n\nexport function useQuery<\n  TQueryFnData = unknown,\n  TError = unknown,\n  TData = TQueryFnData,\n  TQueryKey extends QueryKey = QueryKey,\n>(\n  queryKey: TQueryKey,\n  queryFn: QueryFunction<TQueryFnData, TQueryKey>,\n  options?: Omit<\n    UseQueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n    'queryKey' | 'queryFn' | 'initialData'\n  > & { initialData?: () => undefined },\n): UseQueryResult<TData, TError>\n\nexport function useQuery<\n  TQueryFnData = unknown,\n  TError = unknown,\n  TData = TQueryFnData,\n  TQueryKey extends QueryKey = QueryKey,\n>(\n  queryKey: TQueryKey,\n  queryFn: QueryFunction<TQueryFnData, TQueryKey>,\n  options?: Omit<\n    UseQueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n    'queryKey' | 'queryFn' | 'initialData'\n  > & { initialData: TQueryFnData | (() => TQueryFnData) },\n): DefinedUseQueryResult<TData, TError>\n\nexport function useQuery<\n  TQueryFnData = unknown,\n  TError = unknown,\n  TData = TQueryFnData,\n  TQueryKey extends QueryKey = QueryKey,\n>(\n  queryKey: TQueryKey,\n  queryFn: QueryFunction<TQueryFnData, TQueryKey>,\n  options?: Omit<\n    UseQueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n    'queryKey' | 'queryFn'\n  >,\n): UseQueryResult<TData, TError>\n\nexport function useQuery<\n  TQueryFnData,\n  TError,\n  TData = TQueryFnData,\n  TQueryKey extends QueryKey = QueryKey,\n>(\n  arg1: TQueryKey | UseQueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n  arg2?:\n    | QueryFunction<TQueryFnData, TQueryKey>\n    | UseQueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n  arg3?: UseQueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n): UseQueryResult<TData, TError> {\n  const parsedOptions = parseQueryArgs(arg1, arg2, arg3)\n  return useBaseQuery(parsedOptions, QueryObserver)\n}\n"],"names":["_ref","onFileSelect","_jsx","children","className","type","onChange","e","target","files","categoryData","submitFn","isUploadLoading","isUploadError","uploadError","method","imageData","_useState","useState","image","title","_useState2","_slicedToArray","setTitle","_useState3","desc","_useState4","description","setDescription","_useState5","category","_id","_useState6","setCategory","_useState7","_useState8","selectedFile","setSelectedFile","_useState9","_useState10","inputError","setInputError","_jsxs","style","fontFamily","info","message","onSubmit","preventDefault","formData","FormData","append","htmlFor","id","value","name","map","ImageUploader","file","_useQuery","useQuery","queryKey","queryFn","fetchCategories","data","isError","error","_Fragment","UploadImageForm","arg1","arg2","arg3","useBaseQuery","parsedOptions","QueryObserver"],"sourceRoot":""}